---
title: "Make Code More Modular Recipe"
date: "`r Sys.Date()`"
output: html_document
---

# Make Code More Modular

## Ingredients

* Existing code
* Code structure
* Dependencies
* Use patterns
* Testing requirements
* Documentation needs

## Instructions

Use this prompt template:

````
Please help make this code more modular:

```r
[paste code here]
```

### Code analysis:
* Current structure:
    - [describe main components]
    - [identify repetitive parts]
    - [note dependencies]
* Pain points:
    - [maintenance issues]
    - [reuse problems]
    - [testing difficulties]
* Goals:
    - [desired improvements]
    - [specific needs]
    - [performance requirements]

### Modularization needs:
* Component types:
    - [data processing]
    - [analysis]
    - [visualization]
    - [utilities]
* Interface requirements:
    - [inputs/outputs]
    - [error handling]
    - [documentation]
* Testing considerations:
    - [unit tests]
    - [integration]
    - [validation]

### Project context:
* Usage: [how code is used]
* Maintenance: [who maintains]
* Updates: [how often changed]
* Constraints: [limitations]
````

## Tips

* Start with functions
* Use consistent interfaces
* Document dependencies
* Create helper functions
* Consider testing
* Plan error handling
* Think about reuse
* Keep functions focused

## Serves

* Large scripts
* Complex analyses
* Shared code
* Package development
* Team projects
* Maintenance needs
* Integration requirements

## Example

````
Please help make this code more modular:

```r
# Load libraries
library(tidyverse)
library(lubridate)

# Read and process sales data
sales <- read_csv("sales.csv")
sales$date <- as.Date(sales$date)
sales$month <- floor_date(sales$date, "month")
sales$year <- year(sales$date)

# Calculate monthly metrics
monthly_sales <- sales %>%
  group_by(month) %>%
  summarize(
    total_sales = sum(amount),
    avg_sale = mean(amount),
    n_transactions = n()
  )

# Create visualizations
ggplot(monthly_sales, aes(x = month, y = total_sales)) +
  geom_line() +
  geom_point() +
  theme_minimal() +
  labs(title = "Monthly Sales Trend")

# Export results
write_csv(monthly_sales, "monthly_summary.csv")
print(summary(monthly_sales))
```

### Code analysis:
* Current structure:
    - Single script
    - Linear workflow
    - Mixed concerns
* Pain points:
    - Hard-coded values
    - No error handling
    - Limited reusability
* Goals:
    - Separate concerns
    - Enable reuse
    - Add error checking
    - Improve maintenance

### Modularization needs:
* Component types:
    - Data import/cleaning
    - Analysis functions
    - Visualization
    - Export utilities
* Interface requirements:
    - Consistent parameters
    - Error messages
    - Return values
* Testing considerations:
    - Unit test components
    - Validate results
    - Check edge cases

### Project context:
* Usage: Monthly reporting
* Maintenance: Data team
* Updates: Weekly data
* Constraints: Must run in 5 min
````

## Modularization Process

### 1. Component Identification

1. **Core Functions**
   * Data loading
   * Processing
   * Analysis
   * Visualization

2. **Support Functions**
   * Utilities
   * Helpers
   * Validation
   * Configuration

3. **Shared Resources**
   * Constants
   * Parameters
   * Templates
   * Configurations

### 2. Interface Design

1. **Function Signatures**
   * Clear names
   * Consistent parameters
   * Default values
   * Return types

2. **Error Handling**
   * Input validation
   * Error messages
   * Recovery options
   * Logging

3. **Documentation**
   * Purpose
   * Parameters
   * Returns
   * Examples

### 3. Organization Structure

1. **File Organization**
   * Source files
   * Test files
   * Documentation
   * Resources

2. **Code Flow**
   * Dependencies
   * Execution order
   * Error paths
   * Logging

3. **Configuration**
   * Settings
   * Parameters
   * Environment
   * Paths

### 4. Testing Strategy

1. **Unit Tests**
   * Component tests
   * Edge cases
   * Error conditions
   * Performance

2. **Integration Tests**
   * Component interaction
   * Workflow validation
   * End-to-end tests
   * Performance tests

