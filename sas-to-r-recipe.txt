---
title: "Translate SAS to R Recipe"
date: "`r Sys.Date()`"
output: html_document
---

# Translate SAS to R

## Ingredients

* SAS code
* Data structures
* Required functionality
* Output requirements
* Context information
* Documentation needs

## Instructions

Use this prompt template:

````
Please translate this SAS code to R:

```sas
[paste SAS code here]
```

### Translation needs:
* Output matching:
    - [exact/approximate]
    - [format requirements]
* Package preferences:
    - [base R/tidyverse]
    - [specific packages]
* Style requirements:
    - [coding style]
    - [naming conventions]

### Code context:
* Purpose: [what code does]
* Data details:
    - [structure]
    - [size]
    - [special features]
* Dependencies:
    - [SAS procedures used]
    - [macros used]

### Additional requirements:
* Performance: [constraints]
* Documentation: [needs]
* Testing: [requirements]
* Error handling: [needs]
````

## Tips

* Match SAS procedures
* Consider data sizes
* Check sorting behavior
* Verify date handling
* Match missing values
* Test numeric precision
* Document differences
* Validate results

## Serves

* Migration projects
* Code conversion
* Process automation
* Documentation
* Training
* Validation
* Testing

## Example

````
Please translate this SAS code to R:

```sas
/* Sort and summarize sales data */
PROC SORT DATA=sales;
  BY region date;
RUN;

PROC MEANS DATA=sales NWAY MISSING;
  CLASS region date;
  VAR amount returns;
  OUTPUT OUT=summary
         MEAN=avg_amount avg_returns
         SUM=total_amount total_returns
         N=n_transactions;
RUN;

/* Create filtered dataset */
DATA sales_filtered;
  SET summary;
  WHERE avg_amount > 1000 AND 
        n_transactions >= 10;
  profit = total_amount - total_returns;
  month = MONTH(date);
  year = YEAR(date);
RUN;
```

### Translation needs:
* Output matching: exact
* Package preferences:
    - tidyverse preferred
    - data.table for large data
* Style requirements:
    - tidyverse style
    - snake_case naming

### Code context:
* Purpose: Sales data summary
* Data details:
    - Daily sales by region
    - Multiple years
    - Missing values present
* Dependencies:
    - PROC SORT
    - PROC MEANS
    - Basic DATA step

### Additional requirements:
* Performance: Large datasets
* Documentation: Needed
* Testing: Compare outputs
* Error handling: Basic
````

## Common Translation Patterns

### 1. Data Steps

1. **READ/SET**
```sas
DATA new;
  SET old;
RUN;
```
```r
new <- old
```

2. **WHERE**
```sas
DATA new;
  SET old;
  WHERE x > 10;
RUN;
```
```r
new <- old %>%
  filter(x > 10)
```

3. **BY Groups**
```sas
DATA new;
  SET old;
  BY group;
RUN;
```
```r
new <- old %>%
  group_by(group)
```

### 2. PROC Translation

1. **PROC SORT**
```sas
PROC SORT DATA=data;
  BY var1 var2;
RUN;
```
```r
data <- data %>%
  arrange(var1, var2)
```

2. **PROC MEANS**
```sas
PROC MEANS DATA=data;
  CLASS group;
  VAR x y;
RUN;
```
```r
data %>%
  group_by(group) %>%
  summarise(
    across(c(x, y),
           list(mean = mean,
                sum = sum,
                n = length))
  )
```

3. **PROC SQL**
```sas
PROC SQL;
  SELECT *
  FROM data
  WHERE x > 10;
QUIT;
```
```r
data %>%
  filter(x > 10)
```

### 3. Function Mappings

1. **Date Functions**
   * SAS: `YEAR(date)` → R: `year(date)`
   * SAS: `MDY(m,d,y)` → R: `make_date(y,m,d)`
   * SAS: `TODAY()` → R: `Sys.Date()`

2. **String Functions**
   * SAS: `SUBSTR(x,1,3)` → R: `str_sub(x,1,3)`
   * SAS: `UPCASE(x)` → R: `str_to_upper(x)`
   * SAS: `TRIM(x)` → R: `str_trim(x)`

3. **Statistical Functions**
   * SAS: `LAG(x)` → R: `lag(x)`
   * SAS: `SUM(x)` → R: `sum(x)`
   * SAS: `MEAN(x)` → R: `mean(x)`

