[["index.html", "Coding Prompt Cookbook Recipes Starters Create code from scratch Demystifying Code or Output Troubleshooting Documentation Code expansion or improvement Translation", " Coding Prompt Cookbook Recipes Starters Make an R notebook or R Bookdown site from a text outline Build a Shiny dashboard template Create code from scratch Generate new code using a specific package Generate variations based on an example Demystifying Code or Output Explain complex code Explain output Troubleshooting Debug confusing error messages Fix a Git merge conflict Documentation Generate roxygen2 documentation Create README.md files Document data dictionaries Create function usage examples Code expansion or improvement Convert code to function Add error handling Make code more modular Translation Translate SAS to R Translate Word to markdown "],["generate.html", "Data generation", " Data generation Synthesize data to match script requirements Synthesize data to match column names "],["code-to-function.html", "Convert Code to Function Ingredients Instructions Tips Serves Example", " Convert Code to Function Ingredients Code to convert Function requirements Input parameters Return values Error handling needs Documentation needs Instructions Use this prompt template: Please convert this code to a function: ```r [paste code here] ``` ### Function requirements: * Purpose: [what function should do] * Name: [proposed function name] * Inputs: - [param1]: [type/purpose] - [param2]: [type/purpose] * Return value: [what to return] ### Additional needs: * Error checking: [required validations] * Documentation: [level needed] * Examples: [if needed] * Dependencies: [required packages] ### Code context: * Current variables: [list key variables] * Current dependencies: [packages used] * Scope requirements: [where used] * Performance needs: [if any] Tips Choose clear name Define parameters Structure returns Add documentation Include examples Consider scope Handle errors Test cases Serves Script conversion Code reusability Package development Process automation Testing setup Documentation Workflow improvement Example Please convert this code to a function: ```r # Current code processes sales data library(dplyr) # Calculate metrics sales_data &lt;- read_csv(&quot;sales.csv&quot;) monthly_totals &lt;- sales_data %&gt;% group_by(month = floor_date(date, &quot;month&quot;)) %&gt;% summarize( total_sales = sum(amount), avg_sale = mean(amount), n_transactions = n() ) # Export results write_csv(monthly_totals, &quot;monthly_summary.csv&quot;) ``` ### Function requirements: * Purpose: Process sales data and calculate monthly metrics * Name: calculate_monthly_sales * Inputs: - input_file: path to sales data CSV - output_file: path for results (optional) * Return value: Monthly summary dataframe ### Additional needs: * Error checking: File existence, data format * Documentation: Full roxygen style * Examples: With sample data * Dependencies: dplyr, lubridate ### Code context: * Current variables: sales_data, monthly_totals * Current dependencies: dplyr, readr, lubridate * Scope requirements: Part of reporting package * Performance needs: Handle large files "],["column-synthesis.html", "Synthesize Data to Match Column Names Ingredients Instructions Tips Serves Example Pattern Recognition Guide", " Synthesize Data to Match Column Names Ingredients Column names list Expected data types Size requirements Value constraints Naming patterns Common prefixes/suffixes Instructions Use this prompt template: Please help synthesize data for these columns: ```r columns &lt;- c( [paste column names here] ) ``` ### Data requirements: * Size: [number of rows needed] * Format: [data.frame/tibble/etc] * General rules: - Missing values: [allowed/not allowed] - Unique constraints: [if any] - Date format: [if needed] ### Column name patterns: * ID columns: [patterns] * Date columns: [patterns] * Numeric columns: [patterns] * Category columns: [patterns] * Flag columns: [patterns] ### Value guidelines: * Ranges: [min/max if known] * Distributions: [if specific needed] * Categories: [known values] * Dependencies: [between columns] * Special cases: [if any] Tips Look for naming patterns Check common prefixes Consider suffixes Note ID columns Identify dates Check for flags Find categories Note measurements Serves Test data creation Mock datasets Documentation Examples Prototypes Training data Demonstrations Example Please help synthesize data for these columns: ```r columns &lt;- c( &quot;customer_id&quot;, &quot;signup_date&quot;, &quot;plan_type&quot;, &quot;monthly_fee&quot;, &quot;is_active&quot;, &quot;last_payment_date&quot;, &quot;total_downloads&quot;, &quot;avg_daily_usage_hrs&quot;, &quot;referral_source&quot; ) ``` ### Data requirements: * Size: 100 rows * Format: tibble * General rules: - No missing values - customer_id must be unique - Dates between 2020-2024 ### Column name patterns: * ID columns: ends in &#39;_id&#39; * Date columns: contains &#39;_date&#39; * Numeric columns: starts with &#39;total_&#39;, &#39;avg_&#39; * Category columns: contains &#39;_type&#39;, &#39;_source&#39; * Flag columns: starts with &#39;is_&#39; ### Value guidelines: * Ranges: - monthly_fee: $5-50 - total_downloads: 0-1000 - avg_daily_usage: 0-24 * Categories: - plan_type: &quot;basic&quot;, &quot;premium&quot;, &quot;enterprise&quot; - referral_source: &quot;web&quot;, &quot;app&quot;, &quot;friend&quot;, &quot;ad&quot; * Dependencies: - last_payment_date &gt; signup_date - monthly_fee depends on plan_type * Special cases: - Include some inactive customers Pattern Recognition Guide 1. Common Column Types Identifiers # Patterns: _id, id_, number id_patterns &lt;- c(&quot;_id$&quot;, &quot;^id&quot;, &quot;_num$&quot;, &quot;_number$&quot;) # Generation: ids &lt;- sprintf(&quot;CUST%05d&quot;, 1:n) Dates # Patterns: _date, _dt, _time date_patterns &lt;- c(&quot;_date$&quot;, &quot;_dt$&quot;, &quot;^date&quot;, &quot;_time$&quot;) # Generation: dates &lt;- seq(from = as.Date(&quot;2020-01-01&quot;), by = &quot;day&quot;, length.out = n) Categories # Patterns: _type, _category, _class, _group cat_patterns &lt;- c(&quot;_type$&quot;, &quot;_category$&quot;, &quot;_source$&quot;, &quot;_group$&quot;) # Generation: categories &lt;- sample(levels, n, replace = TRUE) 2. Value Generation Numeric Values # Amounts amounts &lt;- round(runif(n, min, max), 2) # Counts counts &lt;- rpois(n, lambda = 10) # Percentages percentages &lt;- round(runif(n, 0, 100), 1) Categorical Values # Simple categories status &lt;- sample(c(&quot;active&quot;, &quot;inactive&quot;), n, replace = TRUE) # Weighted categories types &lt;- sample( c(&quot;basic&quot;, &quot;premium&quot;, &quot;enterprise&quot;), n, replace = TRUE, prob = c(0.6, 0.3, 0.1) ) Flags/Indicators # Boolean is_active &lt;- sample(c(TRUE, FALSE), n, replace = TRUE) # Y/N yn_flag &lt;- sample(c(&quot;Y&quot;, &quot;N&quot;), n, replace = TRUE) 3. Special Cases Dependent Values # Value based on category price &lt;- ifelse(type == &quot;premium&quot;, runif(n, 50, 100), runif(n, 10, 49)) # Sequential dates end_date &lt;- start_date + sample(1:365, n, replace = TRUE) Unique Constraints # Unique identifiers unique_ids &lt;- make.unique(as.character(ids)) # Unique combinations unique_pairs &lt;- unique( expand.grid(factor1 = levels1, factor2 = levels2) ) Missing Values # Random NAs values[sample(1:n, n * 0.1)] &lt;- NA # Conditional NAs values[values &gt; threshold] &lt;- NA "],["data-dictionary.html", "Document Data Dictionaries Ingredients Instructions Tips Serves Example", " Document Data Dictionaries Ingredients Dataset information Variable descriptions Data types Valid values/ranges Missing value codes Dependencies/relationships Instructions Use this prompt template: Please create a data dictionary for: ### Dataset overview: * Name: [dataset name] * Purpose: [main use] * Collection: [method/time] * Size: [dimensions] * Format: [file type] ### Variable documentation: * Identifiers: - [list ID variables] * Measures: - [list measurement variables] * Categories: - [list categorical variables] * Dates: - [list temporal variables] * Calculated: - [list derived variables] ### Documentation needs: * Detail level: [basic/comprehensive] * Special requirements: - [coding systems] - [standards] - [missing values] - [relationships] ### Additional information: * Quality notes: [known issues] * Dependencies: [related data] * Updates: [frequency] * Constraints: [limitations] Tips Use consistent format Define abbreviations Document missing values Specify units Note relationships Include constraints Add examples Track versions Serves Research data Survey data Administrative data Time series Panel data Linked data Analytics datasets Example Please create a data dictionary for: ### Dataset overview: * Name: patient_outcomes * Purpose: Track treatment results * Collection: Monthly hospital records * Size: 10,000 x 15 * Format: CSV file ### Variable documentation: * Identifiers: - patient_id - visit_id * Measures: - vital signs - lab results * Categories: - diagnosis - treatment * Dates: - admission_date - discharge_date * Calculated: - length_of_stay - risk_score ### Documentation needs: * Detail level: comprehensive * Special requirements: - ICD-10 codes - LOINC codes - Multiple NA types - Patient-visit links ### Additional information: * Quality notes: Some legacy codes * Dependencies: Links to pharmacy data * Updates: Monthly * Constraints: PHI restricted "],["debug-error.html", "Debug Confusing Error Messages Ingredients Instructions Tips Serves Example", " Debug Confusing Error Messages Ingredients Error message Code context Environment info Steps to reproduce Package versions Data sample Instructions Use this prompt template: Please help debug this error: ``` [paste full error message] ``` ### Code causing error: ```r [paste minimal code that produces error] ``` ### Reproducible example: ```r # Sample data [minimal data example] # Steps to reproduce library(package_name) [steps to error] ``` ### Environment details: * R version: [version] * Operating System: [OS] * Key packages: - [package1]: [version] - [package2]: [version] ### Additional context: * Goal: [what you&#39;re trying to do] * When error occurs: [always/sometimes] * What I&#39;ve tried: [debugging attempts] * Recent changes: [relevant updates] ### Special considerations: * Data size: [if relevant] * Memory usage: [if relevant] * Performance: [if relevant] * Dependencies: [if relevant] Tips Show exact error Create minimal example Include environment Test reproduction Check versions Note patterns Document attempts Verify data Serves Runtime errors Package issues Installation problems Memory errors Syntax errors Data issues Performance problems Example Please help debug this error: ``` Error in select(): ! Problem while computing `ratio = value/group_total`. Caused by error in `/`: ! non-numeric argument to binary operator ``` ### Code causing error: ```r data %&gt;% group_by(category) %&gt;% mutate(ratio = value/sum(value)) ``` ### Reproducible example: ```r # Sample data data &lt;- tibble( category = c(&quot;A&quot;, &quot;B&quot;, &quot;A&quot;), value = c(&quot;10&quot;, &quot;20&quot;, &quot;30&quot;) # Note: character ) # Steps to reproduce library(dplyr) data %&gt;% group_by(category) %&gt;% mutate(ratio = value/sum(value)) ``` ### Environment details: * R version: 4.2.0 * Operating System: Windows 10 * Key packages: - dplyr: 1.1.0 - tidyverse: 2.0.0 ### Additional context: * Goal: Calculate ratio within groups * When error occurs: Consistently * What I&#39;ve tried: - Checked data types - Printed intermediate results * Recent changes: Data import method ### Special considerations: * Data size: Small example * Memory usage: Not applicable * Performance: Not applicable * Dependencies: Core tidyverse only "],["error-handling.html", "Add Error Handling Ingredients Instructions Tips Serves Example", " Add Error Handling Ingredients Function code Input requirements Expected errors Validation rules Recovery actions Warning conditions Instructions Use this prompt template: Please add error handling to this function: ```r [paste function code here] ``` ### Function requirements: * Input validation: - [param1]: [requirements] - [param2]: [requirements] * Error conditions: - [list error cases] - [expected behavior] * Warning conditions: - [list warning cases] - [expected behavior] ### Error handling needs: * Validation type: - [strict/permissive] - [recovery options] * Message style: - [technical/user-friendly] - [verbosity level] * Special cases: - [edge cases] - [recovery strategies] ### Context: * Users: [target audience] * Usage: [where/how used] * Criticality: [impact of failures] * Dependencies: [external factors] Tips Validate early Be specific Offer recovery Use consistent messages Consider users Document errors Test thoroughly Plan recovery Serves Function development Package creation Data validation User interfaces Critical systems Production code API endpoints Example Please add error handling to this function: ```r calculate_portfolio_returns &lt;- function(prices, weights, dates) { total_return &lt;- sum(prices * weights) return(total_return) } ``` ### Function requirements: * Input validation: - prices: numeric vector, non-negative - weights: numeric vector, sum to 1 - dates: Date vector, ordered * Error conditions: - Missing values - Mismatched lengths - Invalid data types - Negative prices * Warning conditions: - Single asset portfolio - Short time period - Extreme weights ### Error handling needs: * Validation type: - Strict for financial calculations - No automatic corrections * Message style: - Technical for financial users - Include problematic values * Special cases: - Zero weights - Missing dates - Price adjustments ### Context: * Users: Financial analysts * Usage: Portfolio analytics * Criticality: High (financial impact) * Dependencies: Market data feeds "],["explain-chunk.html", "Explain What a Code Chunk is Doing Ingredients Instructions Tips Serves Example", " Explain What a Code Chunk is Doing Ingredients Code chunk to explain Context information Programming background Specific questions Package versions Instructions Use this prompt template: Please explain what this code chunk does: ```r [paste code here] ``` ### Context: * Location: [where in script/program] * Purpose: [what it should do] * Input data: - Structure: [data format] - Example: [sample data] * Output: [expected result] ### My background: * R experience: [beginner/intermediate/advanced] * Familiar with: [concepts you know] * Unclear about: [confusing parts] * Package experience: [relevant packages] ### Specific questions: * [list parts needing explanation] * [list concepts to clarify] * [note practical applications] * [ask about alternatives] ### Additional information: * Performance concerns: [if any] * Error handling: [if relevant] * Style questions: [if any] * Alternative approaches: [if interested] Tips Show context Identify patterns Note dependencies Consider alternatives Check documentation Test assumptions Verify output Explain flow Serves Code review Learning Documentation Troubleshooting Optimization Refactoring Knowledge sharing Example Please explain what this code chunk does: ```r results &lt;- mtcars %&gt;% group_by(cyl) %&gt;% summarise(across( where(is.numeric), list( avg = ~mean(., na.rm = TRUE), sd = ~sd(., na.rm = TRUE) ), .names = &quot;{.col}_{.fn}&quot; )) %&gt;% arrange(desc(cyl)) ``` ### Context: * Location: Data analysis script * Purpose: Calculate summary statistics * Input data: - Structure: mtcars dataset - Example: head(mtcars, 2) * Output: Summary by cylinder groups ### My background: * R experience: intermediate * Familiar with: dplyr basics, group_by * Unclear about: across(), where() * Package experience: tidyverse ### Specific questions: * How does across() work with where()? * What does the .names parameter do? * Why use ~ in the list? * Is there a simpler way? ### Additional information: * Performance concerns: None * Error handling: NA handling * Style questions: Alternative syntax * Alternative approaches: Base R version "],["explain-stats.html", "Explain Statistical Output Ingredients Instructions Tips Serves Example", " Explain Statistical Output Ingredients Statistical output Analysis context Statistical background Specific questions Data description Interpretation needs Instructions Use this prompt template: Please explain this statistical output: ``` [paste output here] ``` ### Analysis context: * Goal: [analysis purpose] * Data background: - Response: [dependent variable] - Predictors: [independent variables] - Sample size: [if known] - Data type: [experimental/observational] ### My background: * Statistical knowledge: [basic/intermediate/advanced] * Familiar with: [concepts you know] * Unclear about: [confusing concepts] * Software experience: [relevant packages] ### Specific needs: * Interpretation focus: - [list parts needing explanation] - [specific metrics of interest] - [practical implications] * Format preferences: - [technical/non-technical] - [level of detail] - [visualization needs] ### Additional questions: * Assumptions: [if relevant] * Diagnostics: [if needed] * Alternatives: [if interested] * Follow-up: [next steps] Tips Start with overview Explain step by step Use plain language Provide context Include examples Note assumptions Suggest diagnostics Consider alternatives Serves Model summaries Test results ANOVA output Regression analysis Classification metrics Diagnostic tests Summary statistics Example Please explain this statistical output: ```r Call: glm(formula = success ~ age + experience + score, family = binomial, data = candidates) Deviance Residuals: Min 1Q Median 3Q Max -2.0523 -0.8235 0.4514 0.8642 2.1256 Coefficients: Estimate Std. Error z value Pr(&gt;|z|) (Intercept) -2.3456 0.8234 -2.849 0.0044 ** age 0.0234 0.0123 1.902 0.0571 . experience 0.3456 0.0945 3.657 0.0003 *** score 0.0567 0.0234 2.423 0.0154 * --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Null deviance: 234.56 on 169 degrees of freedom Residual deviance: 187.89 on 166 degrees of freedom AIC: 195.89 ``` ### Analysis context: * Goal: Predict candidate success * Data background: - Response: Success (yes/no) - Predictors: Age, experience, test score - Sample size: 170 candidates - Data type: Observational ### My background: * Statistical &lt;!--chapter:end:explain-stats-recipe.Rmd--&gt; # Create Function Usage Examples {#function-examples} ## Ingredients * Function code * Input parameters * Return values * Common use cases * Edge cases * Error conditions ## Instructions Use this prompt template: Please create usage examples for this function: [paste function code here] Function details: Purpose: [what function does] Parameters: [param1]: [description] [param2]: [description] Returns: [output description] Dependencies: [required packages] Example needs: Complexity levels: [basic usage] [intermediate cases] [advanced applications] Special cases: [edge cases] [error handling] [performance] Target audience: User level: [beginner/intermediate/advanced] Background: [assumed knowledge] Common problems: [typical issues] Use contexts: [where/how used] Additional requirements: Example data: [needs] Error examples: [if needed] Performance examples: [if needed] Alternative approaches: [if desired] ## Tips * Start simple * Build complexity * Show errors * Include data * Document output * Note alternatives * Consider context * Test examples ## Serves * Package documentation * Function help * Tutorials * Vignettes * Training materials * Testing * Troubleshooting ## Example Please create usage examples for this function: filter_time_series &lt;- function(data, date_col = &quot;date&quot;, value_col = &quot;value&quot;, start_date = NULL, end_date = NULL, threshold = NULL, remove_outliers = FALSE) { # Function definition here } Function details: Purpose: Filter and clean time series data Parameters: data: Time series dataframe date_col: Name of date column value_col: Name of value column start_date: Optional start date end_date: Optional end date threshold: Optional value threshold remove_outliers: Whether to remove outliers Returns: Filtered dataframe Dependencies: dplyr, lubridate Example needs: Complexity levels: Basic date filtering Multiple conditions Outlier removal Special cases: Missing dates Invalid thresholds Date formats Large datasets Target audience: User level: intermediate Background: Basic R and dplyr Common problems: Date handling Use contexts: Data preprocessing Additional requirements: Example data: Sample time series Error examples: Yes Performance examples: No Alternative approaches: Yes &lt;!--chapter:end:function-examples-recipe.Rmd--&gt; # Fix a Git Merge Conflict {#git-merge} ## Ingredients * Conflict markers * Both versions * Branch information * Context * Resolution strategy * Testing requirements ## Instructions Use this prompt template: Please help resolve this merge conflict: &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD [your current version] ======= [incoming version] &gt;&gt;&gt;&gt;&gt;&gt;&gt; branch-name Conflict context: File: [filename and path] Purpose: [file’s role] Current branch: [branch name] Merging from: [branch name] Project stage: [development/production] Code details: Language: [programming language] Dependencies: [relevant packages/libraries] Tests: [affected tests] Documentation: [affected docs] Resolution needs: Requirements: [functionality needs] Constraints: [limitations] Testing: [validation needs] Documentation: [update needs] Additional considerations: Performance: [if relevant] Compatibility: [version requirements] Side effects: [potential impacts] Deployment: [release considerations] ## Tips * Review both versions * Understand context * Check dependencies * Consider tests * Update documentation * Verify functionality * Test thoroughly * Communicate changes ## Serves * Code conflicts * Documentation conflicts * Configuration conflicts * Team collaboration * Version control * Release management * Code review ## Example Please help resolve this merge conflict: &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD def calculate_metrics(data): &quot;&quot;&quot;Calculate basic user engagement metrics&quot;&quot;&quot; return { &#39;active_users&#39;: len(data), &#39;total_actions&#39;: sum(data[&#39;actions&#39;]) } ======= def calculate_metrics(data, include_advanced=False): &quot;&quot;&quot;Calculate user engagement metrics with optional advanced stats&quot;&quot;&quot; metrics = { &#39;active_users&#39;: len(data), &#39;total_actions&#39;: sum(data[&#39;actions&#39;]), &#39;engagement_rate&#39;: sum(data[&#39;actions&#39;])/len(data) } &gt;&gt;&gt;&gt;&gt;&gt;&gt; feature/advanced-metrics Conflict context: File: metrics_calculator.py Purpose: Core metrics calculation Current branch: main Merging from: feature/advanced-metrics Project stage: development Code details: Language: Python Dependencies: pandas Tests: unit tests for metrics Documentation: API docs Resolution needs: Requirements: Maintain backward compatibility Constraints: Must work with existing data Testing: Run full test suite Documentation: Update function docs Additional considerations: Performance: Handle large datasets Compatibility: Python 3.6+ Side effects: Dashboard updates Deployment: Next sprint release &lt;!--chapter:end:git-merge-recipe.Rmd--&gt; # Make Code More Modular {#modular-code} ## Ingredients * Original code * Component structure * Dependencies * Testing requirements * Documentation needs * Interface requirements ## Instructions Use this prompt template: Please help make this code more modular: [paste code here] Code analysis: Current structure: [main components] [dependencies] [flow patterns] Pain points: [maintenance issues] [testing problems] [reuse limitations] Goals: [improvements needed] [specific outcomes] [maintainability needs] Modularization needs: Components needed: [list major functions] [data structures] [utilities] Interface requirements: [input/output specs] [error handling] [validation] Testing considerations: [unit tests] [integration] [validation] Project context: Team size: [number of developers] Maintenance: [who/how often] Updates: [frequency] Constraints: [limitations] ## Tips * Identify patterns * Create functions * Define interfaces * Add documentation * Plan testing * Consider reuse * Handle errors * Think scale ## Serves * Large scripts * Team projects * Legacy code * Package development * Maintenance * Testing * Documentation ## Example Please help make this code more modular: # Load libraries library(tidyverse) library(lubridate) # Process data sales &lt;- read_csv(&quot;sales.csv&quot;) sales$date &lt;- as.Date(sales$date) sales$month &lt;- floor_date(sales$date, &quot;month&quot;) # Calculate summaries monthly_stats &lt;- sales %&gt;% group_by(month, category) %&gt;% summarize( total = sum(amount), average = mean(amount), count = n() ) # Create plots ggplot(monthly_stats, aes(x = month, y = total)) + geom_line() + facet_wrap(~category) # Export results write_csv(monthly_stats, &quot;monthly_summary.csv&quot;) Code analysis: Current structure: Single script Linear workflow Mixed concerns Pain points: Hard-coded values No error handling Limited reusability Goals: Separate concerns Enable reuse Add error checking Modularization needs: Components needed: Data loading Data processing Visualization Export utilities Interface requirements: Function parameters Return values Error messages Testing considerations: Unit test each component Integration tests Data validation Project context: Team size: 3 developers Maintenance: Weekly updates Updates: New features monthly Constraints: Must run in under 5 min &lt;!--chapter:end:modular-code-recipe.Rmd--&gt; ## Make R Notebook/Bookdown from Text Outline {#outline-to-r-doc} ### Ingredients * Text outline * Output format choice (notebook/bookdown) * Chapter/section organization * Code needs * Output requirements * Cross-reference needs ### Instructions Use this prompt template: Please convert this outline to [a R notebook/R bookdown site]: [paste outline here] Structure needs: Format: [notebook/bookdown] Organization: [single/multiple files] [chapter structure] [section depth] Special features: [cross-references] [bibliography] [numbering] [table of contents] Code requirements: Code chunks: [yes/no] Languages: [R/Python/etc] Output: [tables/plots/etc] Chunk options: [specific needs] Additional elements: Theme: [if specific needed] Citations: [if needed] Custom formatting: [special needs] Navigation: [requirements] ### Tips * Maintain hierarchy * Consider depth * Plan navigation * Think about code * Include examples * Note dependencies * Consider format * Check structure ### Serves * Course materials * Documentation * Research reports * Technical books * Analysis reports * Tutorials * Guides ### Example Please convert this outline to an R bookdown site: Data Analysis with R 1. Introduction - About this book - Prerequisites - Setup 2. Data Import - CSV files - Excel files - Database connections 3. Data Cleaning - Missing values - Outliers - Data types 4. Analysis - Summary statistics - Visualization - Models Structure needs: Format: bookdown site Organization: Separate file per chapter Two heading levels Numbered sections Chapter navigation Special features: Code folding Figure/table numbers Cross-references Search function Code requirements: Code chunks: yes Languages: R Output: plots, tables Chunk options: Echo code Show results Allow folding Additional elements: Theme: default Citations: none needed Custom formatting: none Navigation: chapter menu ### Common Structures #### 1. File Organization 1. **R Notebook** ```yaml --- title: &quot;Project Title&quot; output: html_notebook --- ## Main heading ### Sub heading #### Sub-sub heading ``` 2. **Bookdown Project** ``` project/ ├── index.Rmd ├── 01-intro.Rmd ├── 02-chapter2.Rmd ├── _bookdown.yml ├── _output.yml └── style.css ``` #### 2. Configuration Files 1. **_bookdown.yml** ```yaml book_filename: &quot;book&quot; language: ui: chapter_name: &quot;Chapter &quot; delete_merged_file: true output_dir: &quot;docs&quot; ``` 2. **_output.yml** ```yaml bookdown::gitbook: css: style.css config: toc: collapse: subsection scroll_highlight: yes download: [&quot;pdf&quot;, &quot;epub&quot;] ``` #### 3. Content Elements 1. **Code Chunks** ````markdown ```r ## R code here ``` Cross-References ## Chapter Title {#chapter-label} See Chapter \\@ref(chapter-label) See Figure \\@ref(fig:plot-label) 4. Special Features Parts Organization ## (PART) Part Title {-} ## First Chapter in Part Custom Blocks ::: {.note} Note content here ::: ::: {.warning} Warning content here ::: Math/Equations Inline math: $y = mx + b$ Display math: $$ y = \\beta_0 + \\beta_1x + \\epsilon $$ "],["package-code.html", "Generate Code Using a Specific Package Ingredients Instructions Tips Serves Example", " Generate Code Using a Specific Package Ingredients Package name Task description Data requirements Output needs Context information Constraints Instructions Use this prompt template: Please generate code using [package] for this task: ### Task description: * Goal: [what to accomplish] * Input: [data/parameters needed] * Output: [desired result] * Context: [usage scenario] ### Package details: * Package: [name and version] * Functions needed: [if known] * Dependencies: [if any] * Constraints: [limitations] ### Code requirements: * Style: [base/tidyverse/etc] * Documentation: [level needed] * Error handling: [if needed] * Performance: [considerations] ### Additional needs: * Examples: [yes/no] * Alternative approaches: [if desired] * Edge cases: [if needed] * Validation: [if required] Tips Check package version Use consistent style Document assumptions Include examples Note dependencies Consider alternatives Test edge cases Verify output Serves Data manipulation Visualization Analysis Reporting Modeling Testing Integration Example Please generate code using dplyr for this task: ### Task description: * Goal: Filter and summarize sales data * Input: Sales dataset with date, region, product, amount * Output: Monthly totals by region * Context: Monthly reporting dashboard ### Package details: * Package: dplyr (&gt;= 1.0.0) * Functions needed: group_by, summarize, filter * Dependencies: tidyverse * Constraints: Handle missing values ### Code requirements: * Style: tidyverse * Documentation: Inline comments * Error handling: Basic checks * Performance: Large dataset friendly ### Additional needs: * Examples: Yes, with sample data * Alternative approaches: Base R version * Edge cases: Missing dates, zero sales * Validation: Check totals "],["readme.html", "Create README.md Files Ingredients Instructions Tips Serves Example", " Create README.md Files Ingredients Project information Installation details Usage instructions Dependencies Contributing guidelines License information Instructions Use this prompt template: Please create a README.md for: ### Project overview: * Name: [project name] * Type: [package/analysis/dashboard/etc] * Purpose: [main goal] * Status: [development/production/archived] ### Technical details: * Language: [programming language] * Dependencies: [key requirements] * Installation: [steps needed] * Compatibility: [versions/platforms] ### Documentation needs: * Sections needed: - [list key sections] - [special sections] * Detail level: [basic/intermediate/comprehensive] * Special requirements: - [badges] - [graphics] - [formatting] ### Additional elements: * Example code: [yes/no] * Contributing: [guidelines needed] * Citation: [if academic] * License: [type] Tips Start with overview Include installation Show basic usage List dependencies Add contribution guidelines Include license Maintain structure Consider audience Serves Open source projects R packages Analysis projects Data products Dashboards Documentation Team resources Example Please create a README.md for: ### Project overview: * Name: tidyhydrology * Type: R package * Purpose: Streamflow data analysis * Status: development ### Technical details: * Language: R (&gt;= 4.0.0) * Dependencies: tidyverse, lubridate, sf * Installation: From GitHub * Compatibility: All platforms ### Documentation needs: * Sections needed: - Installation - Basic usage - Functions - Data sources - Contributing - License * Detail level: comprehensive * Special requirements: - CRAN/GitHub badges - Example plots - Code coverage ### Additional elements: * Example code: yes * Contributing: yes * Citation: yes * License: MIT "],["roxygen2-doc.html", "Generate Roxygen2 Documentation Ingredients Instructions Tips Serves Example Additional Tips for roxygen2", " Generate Roxygen2 Documentation Ingredients Function code Function purpose Parameter descriptions Return value details Examples of usage Dependencies information Instructions Use this prompt template: Please generate roxygen2 documentation for this function: ```r [paste function code here] ``` ### Documentation needs: * Title style: [brief/descriptive/technical] * Description detail level: [basic/intermediate/comprehensive] * Example complexity: [basic/intermediate/advanced] * Include sections: * [list needed sections like @details, @seealso, etc.] ### Function context: * Package: [package name] * Dependencies: [required packages] * Related functions: [list related functions] * Intended users: [target audience] ### Special requirements: * Export status: [exported/internal] * S3/S4 methods: [if applicable] * Inheritance: [if applicable] * Deprecation: [if applicable] Tips Use consistent parameter naming Include representative examples Document return value structure Note side effects Reference related functions Include edge cases Specify data requirements Add package links when relevant Serves Function documentation Method documentation Package data documentation Class documentation Package-level documentation Dataset documentation Re-export documentation Example Please generate roxygen2 documentation for this function: ```r calculate_portfolio_stats &lt;- function(returns, weights = NULL, rebalance_freq = &quot;monthly&quot;, risk_free = 0) { # Validate inputs if (!is.numeric(returns)) stop(&quot;returns must be numeric&quot;) if (!is.null(weights) &amp;&amp; length(weights) != ncol(returns)) { stop(&quot;weights length must match number of assets&quot;) } # Set equal weights if none provided if (is.null(weights)) { weights &lt;- rep(1/ncol(returns), ncol(returns)) } # Calculate portfolio returns port_returns &lt;- calculate_weighted_returns(returns, weights, rebalance_freq) # Calculate statistics stats &lt;- list( mean_return = mean(port_returns), volatility = sd(port_returns) * sqrt(252), sharpe = (mean(port_returns) - risk_free) / (sd(port_returns) * sqrt(252)), max_drawdown = calculate_max_drawdown(port_returns) ) return(stats) } ``` ### Documentation needs: * Title style: technical * Description detail level: comprehensive * Example complexity: intermediate * Include sections: * @details * @seealso * @references * @note ### Function context: * Package: portfolioAnalytics * Dependencies: * stats * xts * Related functions: * calculate_weighted_returns() * calculate_max_drawdown() * Intended users: Finance professionals ### Special requirements: * Export status: exported * S3 methods: supports matrix/xts/data.frame inputs * Inheritance: none * Deprecation: none Additional Tips for roxygen2 Common Tags @param - Parameter description @return - Return value @export - Make function public @keywords - Function categories @family - Related functions @inheritParams - Inherit parameter docs @section - Custom sections Formatting Guidelines Use sentence case for titles End sentences with periods Use backticks for code Use \\code{} for R expressions Use \\link{} for function references Indent examples for readability Best Practices Document all parameters Include units/ranges Note default values Explain return structure Show error conditions Give worked examples Cross-reference methods Common Patterns For S3 methods: @method class generic For datasets: @format @source For packages: @docType package @name package-name For deprecated functions: @deprecated "],["sas-to-r.html", "Translate SAS to R Ingredients Instructions Tips Serves Example", " Translate SAS to R Ingredients SAS code Data structures Required functionality Output requirements Dependencies Error handling Instructions Use this prompt template: Please translate this SAS code to R: ```sas [paste SAS code here] ``` ### Translation needs: * Output matching: - [exact/approximate] - [format requirements] * Package preferences: - [base R/tidyverse] - [specific packages] * Style requirements: - [coding style] - [naming conventions] ### Code context: * Purpose: [what code does] * Data details: - [structure] - [size] - [special features] * Dependencies: - [SAS procedures] - [macros used] ### Additional requirements: * Performance: [constraints] * Documentation: [needs] * Testing: [requirements] * Error handling: [needs] ### Special considerations: * Date handling: [formats] * Missing values: [coding] * Character encoding: [requirements] * Decimal precision: [needs] Tips Check procedures Match sorting Verify dates Handle missing Test output Document differences Consider size Verify precision Serves Code migration Process automation Documentation Training Validation Testing Integration Example Please translate this SAS code to R: ```sas /* Sort and summarize sales data */ PROC SORT DATA=sales; BY region date; RUN; PROC MEANS DATA=sales NWAY MISSING; CLASS region date; VAR amount returns; OUTPUT OUT=summary MEAN=avg_amount avg_returns SUM=total_amount total_returns N=n_transactions; RUN; ``` ### Translation needs: * Output matching: exact * Package preferences: - tidyverse preferred - data.table for large data * Style requirements: - tidyverse style - snake_case naming ### Code context: * Purpose: Sales data summary * Data details: - Sales transactions - Multiple regions - Daily data * Dependencies: - PROC SORT - PROC MEANS - Basic DATA step ### Additional requirements: * Performance: Large datasets * Documentation: Comments needed * Testing: Compare outputs * Error handling: Basic checks ### Special considerations: * Date handling: Match SAS formats * Missing values: Preserve coding * Character encoding: ASCII * Decimal precision: Match SAS "],["shiny-dashboard.html", "Build a Shiny Dashboard Template Ingredients Instructions Tips Serves Example", " Build a Shiny Dashboard Template Ingredients Dashboard components Layout structure User interface elements Server logic Data requirements Theme preferences Instructions Use this prompt template: Please create a Shiny dashboard template with: ### Dashboard structure: * Layout: - [sidebar/navbar/tabs] - [panels/boxes/rows] - [header/footer] * Navigation: - [menu structure] - [page organization] - [links between sections] ### Components needed: * Inputs: - [list input types] - [interactive elements] - [filters/controls] * Outputs: - [plots/tables/text] - [download options] - [dynamic updates] ### Design requirements: * Theme: [style preferences] * Colors: [color scheme] * Responsive: [yes/no] * Custom CSS: [if needed] ### Additional features: * Loading spinners: [yes/no] * Error handling: [requirements] * User feedback: [notifications/messages] * Performance: [considerations] Tips Start with layout Plan user flow Consider modularity Include error handling Add loading states Document dependencies Test responsiveness Consider performance Serves Data visualizations Analytics tools Monitoring systems Report generators Interactive tools Admin panels User interfaces Example Please create a Shiny dashboard template with: ### Dashboard structure: * Layout: - Sidebar navigation - Three main panels - Fixed header * Navigation: - Overview page - Detail analysis - Settings page - Help section ### Components needed: * Inputs: - Date range picker - Category filters - Search box - Action buttons * Outputs: - Summary metrics - Time series plots - Data tables - Download reports ### Design requirements: * Theme: AdminLTE * Colors: Blue/white * Responsive: yes * Custom CSS: minimal ### Additional features: * Loading spinners: yes * Error handling: user messages * User feedback: notifications * Performance: caching needed "],["synthesize-data.html", "Synthesize Data to Match Script Requirements Ingredients Instructions Tips Serves Example Synthesis Patterns", " Synthesize Data to Match Script Requirements Ingredients Target script Data structure needs Variable requirements Relationships/dependencies Size requirements Distribution needs Instructions Use this prompt template: Please help synthesize data for this script: ```r [paste script or function here] ``` ### Data requirements: * Structure: - Format: [data.frame/matrix/list/etc] - Dimensions: [rows x columns] * Variables needed: - [var1]: [type/range/distribution] - [var2]: [type/range/distribution] * Relationships: - [correlations] - [dependencies] - [constraints] ### Special considerations: * Missing data: [pattern/percentage] * Outliers: [presence/frequency] * Date ranges: [if needed] * Categories: [levels/distribution] * Seeds: [reproducibility needs] ### Context: * Purpose: [testing/demonstration/etc] * Size constraints: [memory/time] * Special cases: [edge cases needed] * Output validation: [requirements] Tips Match exact structure Use realistic values Set random seed Include edge cases Maintain relationships Document assumptions Test with script Verify constraints Serves Testing scripts Demonstrations Documentation Teaching Validation Debugging Examples Example Please help synthesize data for this script: ```r analyze_customer_churn &lt;- function(customer_data) { customer_data %&gt;% group_by(segment) %&gt;% summarize( churn_rate = mean(churned), avg_tenure = mean(tenure_months), avg_spending = mean(monthly_spend), n_customers = n() ) %&gt;% arrange(desc(churn_rate)) } ``` ### Data requirements: * Structure: - Format: data.frame/tibble - Dimensions: ~1000 rows x 5+ columns * Variables needed: - customer_id: unique identifier - segment: categorical (3-4 levels) - churned: logical - tenure_months: numeric (0-60) - monthly_spend: numeric (positive) * Relationships: - Higher spend → Lower churn - Higher tenure → Lower churn - Segment affects churn rate ### Special considerations: * Missing data: None allowed * Outliers: Few high spenders * Categories: - Segments: &quot;Basic&quot;, &quot;Plus&quot;, &quot;Premium&quot; - Balanced sizes * Seeds: Set for reproducibility ### Context: * Purpose: Function testing * Size: Small demonstration * Special cases: Include all segments * Validation: Reasonable churn rates Synthesis Patterns 1. Basic Structures Numeric Data # Normal distribution values &lt;- rnorm(n, mean = 10, sd = 2) # Uniform distribution values &lt;- runif(n, min = 0, max = 100) # Integer range values &lt;- sample(1:100, n, replace = TRUE) Categorical Data # Factor with proportions categories &lt;- sample( c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), n, replace = TRUE, prob = c(0.5, 0.3, 0.2) ) # Ordered categories ordered_cats &lt;- factor( categories, levels = c(&quot;Low&quot;, &quot;Medium&quot;, &quot;High&quot;), ordered = TRUE ) Dates/Times # Date sequence dates &lt;- seq( from = as.Date(&quot;2023-01-01&quot;), by = &quot;day&quot;, length.out = n ) # Random dates random_dates &lt;- as.Date( sample( seq(as.Date(&quot;2023-01-01&quot;), as.Date(&quot;2023-12-31&quot;), by = &quot;day&quot;), n, replace = TRUE ) ) 2. Adding Relationships Correlated Variables # Positive correlation x &lt;- rnorm(n) y &lt;- 0.7 * x + rnorm(n, sd = sqrt(1 - 0.7^2)) # Dependent categories category &lt;- ifelse(x &gt; 0, &quot;High&quot;, &quot;Low&quot;) Logical Dependencies # Conditional values value2 &lt;- ifelse(value1 &gt; median(value1), runif(n, 10, 20), runif(n, 0, 10)) Complex Relationships # Multiple factors score &lt;- 0.3 * age + 0.5 * income + rnorm(n, sd = 2) 3. Special Cases Missing Values # Random NAs values[sample(1:n, n * 0.1)] &lt;- NA # Conditional NAs values[values &gt; quantile(values, 0.9)] &lt;- NA Outliers # Add outliers values[sample(1:n, n * 0.05)] &lt;- values * 5 Edge Cases # Special values values &lt;- c(values, Inf, -Inf, 0, NA) "],["word-to-markdown.html", "Translate Word to Markdown Ingredients Instructions Tips Serves Example", " Translate Word to Markdown Ingredients Word document content Formatting requirements Structure needs Special elements Output format Style guidelines Instructions Use this prompt template: Please translate this Word content to Markdown: [paste Word content here] ### Translation needs: * Output format: - [basic/github/hugo/etc] - [special formatting] * Element handling: - Tables: [simple/complex] - Images: [local/web/none] - Lists: [nested/simple] - Code blocks: [yes/no] ### Document features: * Structure elements: - [headings/levels] - [lists/types] - [tables/formats] - [special elements] * Formatting: - [bold/italic] - [highlighting] - [special characters] * Special content: - [equations] - [footnotes] - [citations] - [links] ### Additional requirements: * Image handling: [approach] * Table alignment: [needs] * Link style: [preferences] * Spacing: [requirements] Tips Preserve hierarchy Match formatting Handle images Check tables Verify lists Keep links Test rendering Review spacing Serves Documentation Websites Reports Blogs Wikis Tutorials READMEs Example Please translate this Word content to Markdown: [Word content shows] Course Syllabus: Data Analysis 1. Introduction a. Course Overview b. Prerequisites 2. Methods a. Statistical Approaches b. Software Tools Table 1: Course Schedule Week | Topic | Assignment 1 | Intro | Reading 2 | Methods | Project *Important deadlines in italics* **Key concepts in bold** [Course website](http://example.com) ### Translation needs: * Output format: - GitHub Markdown - Code highlighting * Element handling: - Tables: Simple - Lists: Nested - Code: Yes ### Document features: * Structure elements: - 2 heading levels - Numbered lists - Simple table * Formatting: - Bold/italic text - Hyperlinks - Code blocks * Special content: - Code snippets - External links ### Additional requirements: * Table alignment: Left * Link style: Inline * Spacing: Double "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
