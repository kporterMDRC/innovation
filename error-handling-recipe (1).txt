---
title: "Add Error Handling Recipe"
date: "`r Sys.Date()`"
output: html_document
---

# Add Error Handling

## Ingredients

* Function code
* Input requirements
* Expected errors
* Validation rules
* Recovery actions
* Warning conditions

## Instructions

Use this prompt template:

````
Please add error handling to this function:

```r
[paste function code here]
```

### Function requirements:
* Input validation:
    - [parameter1]: [requirements]
    - [parameter2]: [requirements]
* Error conditions:
    - [list error cases]
    - [expected behavior]
* Warning conditions:
    - [list warning cases]
    - [expected behavior]

### Error handling needs:
* Validation type:
    - [strict/permissive]
    - [recovery options]
* Message style:
    - [technical/user-friendly]
    - [verbosity level]
* Special cases:
    - [edge cases]
    - [recovery strategies]

### Context:
* Users: [target audience]
* Usage: [where/how used]
* Criticality: [impact of failures]
* Dependencies: [external factors]
````

## Tips

* Start with input validation
* Use informative messages
* Consider recovery options
* Document error cases
* Test edge cases
* Add warning conditions
* Consider user experience
* Plan failure modes

## Serves

* Function development
* Package creation
* API endpoints
* Data validation
* User interfaces
* System integrations
* Critical operations

## Example

````
Please add error handling to this function:

```r
calculate_portfolio_returns <- function(prices, 
                                      weights, 
                                      dates) {
  # Current function code
  total_return <- sum(prices * weights)
  return(total_return)
}
```

### Function requirements:
* Input validation:
    - prices: numeric vector, non-negative
    - weights: numeric vector, sum to 1
    - dates: Date vector, ordered
* Error conditions:
    - Missing values
    - Mismatched lengths
    - Invalid data types
    - Negative prices
* Warning conditions:
    - Single asset portfolio
    - Short time period
    - Extreme weights

### Error handling needs:
* Validation type:
    - Strict for financial calculations
    - No automatic corrections
* Message style:
    - Technical for financial users
    - Include problematic values
* Special cases:
    - Zero weights
    - Missing dates
    - Price adjustments

### Context:
* Users: Financial analysts
* Usage: Portfolio analytics
* Criticality: High (financial impact)
* Dependencies: Market data feeds
````

## Standard Approach

### 1. Input Validation

```r
# Type checking
if (!is.numeric(x)) {
  stop("x must be numeric")
}

# Value validation
if (any(x < 0)) {
  stop("x contains negative values: ", 
       paste(x[x < 0], collapse = ", "))
}

# Structure validation
if (length(x) != length(y)) {
  stop("x and y must have same length")
}
```

### 2. Warning Conditions

```r
# Advisory warnings
if (length(x) < 30) {
  warning("Small sample size (n < 30)")
}

# Performance warnings
if (length(x) > 1e6) {
  warning("Large input may impact performance")
}

# Quality warnings
if (any(is.na(x))) {
  warning("Missing values present")
}
```

### 3. Recovery Strategies

```r
# Try-catch blocks
tryCatch(
  {
    # Main operation
  },
  error = function(e) {
    # Recovery action
  },
  warning = function(w) {
    # Warning handler
  },
  finally = {
    # Cleanup
  }
)

# Conditional execution
if (exists("x")) {
  # Main operation
} else {
  # Alternative action
}
```

### 4. Message Templates

1. **Error Messages**
   * Clear problem statement
   * Actual vs. expected
   * Recovery suggestions
   * Reference info

2. **Warning Messages**
   * Issue description
   * Potential impact
   * Mitigation steps
   * Performance notes

3. **Documentation**
   * Common errors
   * Troubleshooting
   * Examples
   * Best practices

