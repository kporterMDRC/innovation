---
title: "Debug Error Messages Recipe"
date: "`r Sys.Date()`"
output: html_document
---

# Debug Confusing Error Messages

## Ingredients

* Full error message
* Code that generated error
* Example data (if relevant)
* Environment information
* Steps to reproduce

## Instructions

Use this prompt template:

````
Please help debug this error:

```
[paste full error message here]
```

### Code causing the error:
```r
[paste minimal code that produces error]
```

### Reproducible example:
```r
# Sample data (if relevant)
set.seed(123)
example_data <- [minimal data that shows error]

# Steps to reproduce
library(package_name)
[steps to reproduce error]
```

### Environment details:
* R version: [version number]
* Operating System: [OS name and version]
* Relevant packages and versions:
    * [package1]: [version]
    * [package2]: [version]

### Additional context:
* What I'm trying to do: [goal]
* When error occurs: [always/sometimes/specific conditions]
* What I've tried: [debugging attempts]
* Recent changes: [any relevant changes]
````

## Tips

* Use `sessionInfo()` for environment details
* Create minimal reproducible example
* Include `set.seed()` if using random data
* Share exact error message
* Describe expected behavior
* Note any pattern to the error
* Include `traceback()` output

## Serves

* Runtime errors
* Package conflicts
* Memory issues
* Performance problems
* Installation errors
* Dependencies issues
* Syntax errors

## Example

````
Please help debug this error:

```
Error in mutate():
! Problem while computing `ratio = value / group_total`.
Caused by error in `/`:
! non-numeric argument to binary operator
```

### Code causing the error:
```r
library(dplyr)

sales_data %>%
  group_by(region) %>%
  mutate(ratio = value / sum(value))
```

### Reproducible example:
```r
# Sample data
sales_data <- data.frame(
  region = c("North", "South", "North", "South"),
  value = c("1000", "2000", "1500", "2500")  # Note: values are character
)

# Steps to reproduce
library(dplyr)
sales_data %>%
  group_by(region) %>%
  mutate(ratio = value / sum(value))
```

### Environment details:
* R version: 4.2.0
* Operating System: Windows 10
* Relevant packages:
    * dplyr: 1.1.0
    * tidyverse: 2.0.0

### Additional context:
* Goal: Calculate each value's proportion within its region
* Error occurs: Consistently with this dataset
* Tried: 
    * Checking column types with str(sales_data)
    * Converting value column to numeric
    * Printing intermediate results
* Recent changes: Data imported from CSV file
````

### Example Response

## Error Diagnosis

### Problem Identified
1. Data type issue:
   * `value` column is character type
   * Mathematical operations require numeric type
   * `sum()` failing on character data

### Solution Steps

1. Check data types:
```r
str(sales_data)
```

2. Convert to numeric:
```r
sales_data_fixed <- sales_data %>%
  mutate(value = as.numeric(value))
```

3. Try original operation:
```r
sales_data_fixed %>%
  group_by(region) %>%
  mutate(ratio = value / sum(value))
```

### Prevention Strategies

1. Validate data on import:
```r
read_csv("sales_data.csv", 
  col_types = cols(
    region = col_character(),
    value = col_double()
  )
)
```

2. Add error checking:
```r
sales_data %>%
  # Verify numeric
  mutate(value = as.numeric(value)) %>%
  # Check for conversion problems
  filter(!is.na(value)) %>%
  # Proceed with calculation
  group_by(region) %>%
  mutate(ratio = value / sum(value))
```

3. Create validation function:
```r
validate_sales_data <- function(data) {
  if (!is.numeric(data$value)) {
    stop("'value' column must be numeric")
  }
  if (any(is.na(data$value))) {
    warning("Missing values found in 'value' column")
  }
  invisible(data)
}
```

### Common Variations of This Error

1. Factor to numeric:
```
non-numeric argument to binary operator
```

2. NULL in mathematical operation:
```
operation not allowed for NULL
```

3. NA handling:
```
missing values in computation
```

### Debugging Process

1. Inspect data:
```r
glimpse(sales_data)
summary(sales_data)
```

2. Check intermediate results:
```r
sales_data %>%
  group_by(region) %>%
  summarise(
    total = sum(as.numeric(value)),
    n = n(),
    has_na = any(is.na(value))
  )
```

3. Traceback for nested functions:
```r
options(error = recover)
# Re-run problematic code
```
