---
title: "Fix Git Merge Conflict Recipe"
date: "`r Sys.Date()`"
output: html_document
---

# Fix a Git Merge Conflict

## Ingredients

* Conflicting files
* Both versions of the code
* Understanding of desired outcome
* Git branch information
* Project context

## Instructions

Use this prompt template:

````
Please help resolve this merge conflict:

### Conflict details:
```
[paste conflict markers and surrounding code]
```

### Branch information:
* Current branch: [branch name]
* Merging from: [branch name]
* Project context: [what the code does]

### File purpose:
* File: [filename]
* Purpose: [what this file does]
* Dependencies: [related files/functions]

### Desired outcome:
* Goal: [what should the merged code do]
* Requirements: [specific functionality needed]
* Constraints: [any limitations]

### Additional context:
* Recent changes: [relevant changes in both branches]
* Testing requirements: [how to verify the merge]
* Concerns: [any specific issues]
````

## Tips

* Include several lines before/after conflict markers
* Show full function/class context if relevant
* Note any tests that must pass
* Mention related files
* Include branch history context
* Consider dependent code
* Note performance requirements

## Serves

* File conflicts
* Function conflicts
* Configuration conflicts
* Documentation conflicts
* Dependency conflicts
* Version conflicts
* Multiple contributor conflicts

## Example

````
Please help resolve this merge conflict:

### Conflict details:
```
# Calculate user metrics
<<<<<<< HEAD
def calculate_metrics(data):
    """Calculate basic user engagement metrics"""
    return {
        'active_users': len(data),
        'total_actions': sum(data['actions']),
        'avg_session': data['session_time'].mean()
    }
=======
def calculate_metrics(data, include_advanced=False):
    """Calculate user engagement metrics with optional advanced stats"""
    metrics = {
        'active_users': len(data),
        'total_actions': sum(data['actions']),
        'avg_session': data['session_time'].mean(),
        'engagement_rate': sum(data['actions'])/len(data)
    }
    if include_advanced:
        metrics.update({
            'retention': calculate_retention(data),
            'churn_rate': calculate_churn(data)
        })
    return metrics
>>>>>>> feature/advanced-metrics
```

### Branch information:
* Current branch: main
* Merging from: feature/advanced-metrics
* Project context: User analytics dashboard

### File purpose:
* File: metrics_calculator.py
* Purpose: Calculate user engagement metrics
* Dependencies: 
    * calculate_retention()
    * calculate_churn()

### Desired outcome:
* Goal: Keep advanced metrics but maintain backward compatibility
* Requirements:
    * All existing tests must pass
    * No breaking changes for current users
    * Documentation must be updated
* Constraints:
    * Must work with existing data structure

### Additional context:
* Recent changes:
    * Main: Bug fix in session time calculation
    * Feature: Added advanced metrics
* Testing requirements:
    * Unit tests for both basic and advanced metrics
    * Integration tests with dashboard
* Concerns:
    * Performance with large datasets
    * Backward compatibility
````

### Example Response

## Conflict Resolution

### Recommended Merged Code

```python
def calculate_metrics(data, include_advanced=False):
    """Calculate user engagement metrics
    
    Args:
        data: DataFrame with user activity data
        include_advanced: Optional boolean to include advanced metrics
        
    Returns:
        Dictionary of calculated metrics
    """
    metrics = {
        'active_users': len(data),
        'total_actions': sum(data['actions']),
        'avg_session': data['session_time'].mean()
    }
    
    # Add engagement rate to basic metrics
    metrics['engagement_rate'] = sum(data['actions'])/len(data)
    
    # Optionally include advanced metrics
    if include_advanced:
        metrics.update({
            'retention': calculate_retention(data),
            'churn_rate': calculate_churn(data)
        })
    
    return metrics
```

### Resolution Strategy

1. **Structural Changes**
   * Kept the function signature from feature branch
   * Made advanced metrics optional
   * Maintained core metrics from main

2. **Key Decisions**
   * Included engagement_rate in basic metrics
   * Added proper docstring
   * Preserved backward compatibility

3. **Testing Steps**
```python
# Test basic functionality
basic_metrics = calculate_metrics(test_data)
assert all(k in basic_metrics for k in ['active_users', 'total_actions', 'avg_session'])

# Test advanced metrics
advanced_metrics = calculate_metrics(test_data, include_advanced=True)
assert all(k in advanced_metrics for k in ['retention', 'churn_rate'])
```

### Documentation Updates

```python
# Add to CHANGELOG.md
## [1.1.0] - 2024-12-10
### Added
- Optional advanced metrics (retention and churn rate)
- Engagement rate metric
### Changed
- calculate_metrics now accepts include_advanced parameter
```

### Next Steps

1. Run test suite:
```bash
python -m pytest tests/
```

2. Update documentation:
   * Update function docstring
   * Add examples to README
   * Update API documentation

3. Verify integration:
   * Test dashboard functionality
   * Check performance with large datasets
   * Verify backward compatibility
