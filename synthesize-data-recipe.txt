---
title: "Synthesize Data Recipe"
date: "`r Sys.Date()`"
output: html_document
---

# Synthesize Data to Match Script Requirements

## Ingredients

* Target script
* Data structure needs
* Variable requirements
* Relationships/dependencies
* Size requirements
* Distribution needs

## Instructions

Use this prompt template:

````
Please help synthesize data for this script:

```r
[paste script or function here]
```

### Data requirements:
* Structure:
    - Format: [data.frame/matrix/list/etc]
    - Dimensions: [rows x columns]
* Variables needed:
    - [var1]: [type/range/distribution]
    - [var2]: [type/range/distribution]
* Relationships:
    - [correlations]
    - [dependencies]
    - [constraints]

### Special considerations:
* Missing data: [pattern/percentage]
* Outliers: [presence/frequency]
* Date ranges: [if needed]
* Categories: [levels/distribution]
* Seeds: [reproducibility needs]

### Context:
* Purpose: [testing/demonstration/etc]
* Size constraints: [memory/time]
* Special cases: [edge cases needed]
* Output validation: [requirements]
````

## Tips

* Match exact structure
* Use realistic values
* Set random seed
* Include edge cases
* Maintain relationships
* Document assumptions
* Test with script
* Verify constraints

## Serves

* Testing scripts
* Demonstrations
* Documentation
* Teaching
* Validation
* Debugging
* Examples

## Example

````
Please help synthesize data for this script:

```r
analyze_customer_churn <- function(customer_data) {
  customer_data %>%
    group_by(segment) %>%
    summarize(
      churn_rate = mean(churned),
      avg_tenure = mean(tenure_months),
      avg_spending = mean(monthly_spend),
      n_customers = n()
    ) %>%
    arrange(desc(churn_rate))
}
```

### Data requirements:
* Structure:
    - Format: data.frame/tibble
    - Dimensions: ~1000 rows x 5+ columns
* Variables needed:
    - customer_id: unique identifier
    - segment: categorical (3-4 levels)
    - churned: logical
    - tenure_months: numeric (0-60)
    - monthly_spend: numeric (positive)
* Relationships:
    - Higher spend → Lower churn
    - Higher tenure → Lower churn
    - Segment affects churn rate

### Special considerations:
* Missing data: None allowed
* Outliers: Few high spenders
* Categories: 
    - Segments: "Basic", "Plus", "Premium"
    - Balanced sizes
* Seeds: Set for reproducibility

### Context:
* Purpose: Function testing
* Size: Small demonstration
* Special cases: Include all segments
* Validation: Reasonable churn rates
````

## Synthesis Patterns

### 1. Basic Structures

1. **Numeric Data**
```r
# Normal distribution
values <- rnorm(n, mean = 10, sd = 2)

# Uniform distribution
values <- runif(n, min = 0, max = 100)

# Integer range
values <- sample(1:100, n, replace = TRUE)
```

2. **Categorical Data**
```r
# Factor with proportions
categories <- sample(
  c("A", "B", "C"),
  n,
  replace = TRUE,
  prob = c(0.5, 0.3, 0.2)
)

# Ordered categories
ordered_cats <- factor(
  categories,
  levels = c("Low", "Medium", "High"),
  ordered = TRUE
)
```

3. **Dates/Times**
```r
# Date sequence
dates <- seq(
  from = as.Date("2023-01-01"),
  by = "day",
  length.out = n
)

# Random dates
random_dates <- as.Date(
  sample(
    seq(as.Date("2023-01-01"), as.Date("2023-12-31"), by = "day"),
    n,
    replace = TRUE
  )
)
```

### 2. Adding Relationships

1. **Correlated Variables**
```r
# Positive correlation
x <- rnorm(n)
y <- 0.7 * x + rnorm(n, sd = sqrt(1 - 0.7^2))

# Dependent categories
category <- ifelse(x > 0, "High", "Low")
```

2. **Logical Dependencies**
```r
# Conditional values
value2 <- ifelse(value1 > median(value1),
                 runif(n, 10, 20),
                 runif(n, 0, 10))
```

3. **Complex Relationships**
```r
# Multiple factors
score <- 0.3 * age + 0.5 * income +
         rnorm(n, sd = 2)
```

### 3. Special Cases

1. **Missing Values**
```r
# Random NAs
values[sample(1:n, n * 0.1)] <- NA

# Conditional NAs
values[values > quantile(values, 0.9)] <- NA
```

2. **Outliers**
```r
# Add outliers
values[sample(1:n, n * 0.05)] <- values * 5
```

3. **Edge Cases**
```r
# Special values
values <- c(values, Inf, -Inf, 0, NA)
```

